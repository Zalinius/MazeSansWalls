:alias tn v0 #also used by internal ops, like jump0
:alias tx v1 # PERMANENT
:alias ty v2 # PERMANENT

:alias temp v7
:alias temp2 v8
:alias notsure v9
:alias game_state vA
:alias ZERO vE
:alias carry_flag vF

:const W 5
:const A 7
:const S 8
:const D 9
:const E 6 #Interact key

:const WIDTH 8
:const HEIGHT 8
:const SIZE 8 #memory label size
:const CONT 12 #memory offset between main and v4 := key

:const TRUE  1
:const FALSE 0

:const KEY_FOUND 0b00000001
:const FLAG_B 0b00000010
:const FLAG_C 0b00000100
:const FLAG_D 0b00001000
:const FLAG_E 0b00010000
:const FLAG_F 0b00100000
:const FLAG_G 0b01000000
:const FLAG_H 0b10000000

: main
  
  tx := 4
  ty := 4
	
	loop
		clear
		#drawframe
    computeIoffset

		v4 := key
		
		if v4 == W then ty -= 1
		if v4 == A then tx -= 1
		if v4 == S then ty += 1
		if v4 == D then tx += 1
		if v4 == E then interact
		
		if tx == WIDTH  then tx := 0
		if ty == HEIGHT then ty := 0
		
		if tx == 255 then tx := WIDTH
  	if ty == 255 then ty := HEIGHT
		if tx == WIDTH  then tx -= 1
		if ty == HEIGHT then ty -= 1

again
return
	
: interact

	checkIfPortal

	hasKey
	if v0 == FALSE begin
    if tx == 6 begin
		  if ty == 6 then game_state |= temp
		end
	end
return

: checkIfPortal
  v0 := 0
  if tx == 2 begin
  	if ty == 2 then v0 := 1
	end
  if tx == 6 begin
  	if ty == 3 then v0 := 1
	end
  if tx == 3 begin
  	if ty == 5 then v0 := 1
	end
	
	if v0 == 1 then teleport
	
	return


: teleport
	tx := random 0b00000111
	ty := random 0b00000111
	v0 := ZERO
	v0 += 10
	buzzer := v0
	return

: hasKey #puts boolean into v0
	v0 := game_state
	temp := KEY_FOUND
	v0 &= temp
	return
	
: computeIoffset #into tn
  tn := tx
	tn += ty
	tn += ty
	tn += ty
	tn += ty
	tn += ty
	tn += ty
	tn += ty
	tn += ty
	tn <<= tn
	tn <<= tn
	jump0 tile-table
	return
	

: computeHash
	v0 += 7
	v0 += v4
	v0 += v5
	shiftAndCheck
	shiftAndCheck
	v0 -= v4
	v0 -= v5
	

  v0 += tx
	shiftAndCheck
	shiftAndCheck
	shiftAndCheck
	shiftAndCheck
  v0 -= tx
	
  v0 += ty
	shiftAndCheck
	shiftAndCheck
	shiftAndCheck
  v0 -= ty
	
	return
	
: shiftAndCheck
 	v0 <<= v0
  if carry_flag == 1 then v0 += 1
	return



###########
# DRAWING #
###########

: drawKey
  i := keySprite
  sprite v9 v9 8
  return
	
: drawSpiral
	v4 := 24
	v5 := 8
  i := largeSpiral
  sprite v4 v5 15
	v4 := 32
	v5 := 8
	v0 := 15
  i += v0
  sprite v4 v5 15
return

: drawCrossroads
  v4 := 0
	v5 := 12
  i  := hPathA
  sprite v4 v5 8
  v4 += 8
  i  := hPathD
  sprite v4 v5 8
  v4 += 8
  i  := hPathC
  sprite v4 v5 8
	v4 += 16
  v4 += 8
  i  := hPathB
  sprite v4 v5 8
  v4 += 8
  i  := hPathA
  sprite v4 v5 8
  v4 += 8
  i  := hPathC
  sprite v4 v5 8
	
  v4 := 28
  v5 := 0
  i  := vPathA
  sprite v4 v5 8
	v5 += 24
  i  := vPathB
  sprite v4 v5 8
	
	v4 := 24
	v5 := 8
	i  := crossroadTL
  sprite v4 v5 8	
	v5 := 16
	i  := crossroadBL
  sprite v4 v5 8	
	v4 := 32
	i  := crossroadBR
  sprite v4 v5 8	
	v5 := 8
	i  := crossroadTR
  sprite v4 v5 8	
  

return
	
: drawHPath
  v4 := 0
  v5 := 12
	
	loop
	i  := hPathA
	computeHash
	temp := 0b00011000
  temp &=	v0
	i  += temp
	
  sprite v4 v5 8
 		v4 += 8
	  while v4 != 64 
	again
	
	
	#drawFlowers top
	v4 := 0
	v5 := 5
	loop
		i := smallFlower
		computeHash
		temp := 0b00001100
		temp &= v0
		if temp == 0 then temp := 4
		v4 += temp

		computeHash
		temp  := 0b0000111
		temp &= v0
		v5 += temp
		if v5 > 8 then v5 -= 8
		
		sprite v4 v5 3
	  while v4 < 56
	again

	#drawFlowers bottom
	v4 := 0
	v5 := 26
	loop
		i := smallFlower
		computeHash
		temp := 0b00001100
		temp &= v0
		if temp == 0 then temp := 4
		v4 += temp

		computeHash
		temp  := 0b0000111
		temp &= v0
		v5 += temp
		if v5 > 28 then v5 -= 8
		
		sprite v4 v5 3
	  while v4 < 56
	again

return

: drawVPath
  v4 := 28
  v5 := 0
	
	loop
  	i  := vPathA
	  computeHash
	  temp := 0b00011100
	  temp &=	v0
	  i  += temp
	
    sprite v4 v5 8
 		v5 += 8
	  
		while v5 != 32 
	again
	
	#drawFlowers left
	v4 := 0
	v5 := 0
	loop
		i := smallFlower
		computeHash
		temp := 0b00000011
		temp &= v0
		if temp == 0 then temp := 2
		v5 += temp

		computeHash
		temp  := 0b00001100
		temp &= v0
		if temp == 0 then temp := 5

		v4 += temp
		if v4 > 22 then v4 -= 22
		
		sprite v4 v5 3
	  while v5 < 26
	again

	#drawFlowers right
	v4 := 38
	v5 := 0
	loop
		i := smallFlower
		computeHash
		temp := 0b00000011
		temp &= v0
		if temp == 0 then temp := 2
		v5 += temp

		computeHash
		temp  := 0b00001100
		temp &= v0
		if temp == 0 then temp := 5

		v4 -= temp
		if v4 < 38 then v4 += 22
		
		sprite v4 v5 3
	  while v5 < 26
	again


 return

	
: tile-table
  drawAA        return
  drawBA        return
  drawCA        return
  drawDA        return
  drawEA        return
  drawFA        return
  drawGA        return
  drawHA        return
  drawAB        return
  drawBB        return
  drawCB        return
  drawDB        return
  drawEB        return
  drawFB        return
  drawGB        return
  drawHB        return
  drawAC        return
  drawBC        return
  drawCC        return
  drawDC        return
  drawEC        return
  drawFC        return
  drawGC        return
  drawHC        return
  drawAD        return
  drawBD        return
  drawCD        return
  drawDD        return
  drawED        return
  drawFD        return
  drawGD        return
  drawHD        return
  drawAE        return
  drawBE        return
  drawCE        return
  drawDE        return
  drawEE        return
  drawFE        return
  drawGE        return
  drawHE        return
  drawAF        return
  drawBF        return
  drawCF        return
  drawDF        return
  drawEF        return
  drawFF        return
  drawGF        return
  drawHF        return
  drawAG        return
  drawBG        return
  drawCG        return
  drawDG        return
  drawEG        return
  drawFG        return
  drawGG        return
  drawHG        return
  drawAH        return
  drawBH        return
  drawCH        return
  drawDH        return
  drawEH        return
  drawFH        return
  drawGH        return
  drawHH        return

: drawAA
  return

: drawBA
  return

: drawCA
  return

: drawDA
  return

: drawEA
  drawVPath
  return

: drawFA
  return

: drawGA
  return

: drawHA
  return

: drawAB
  return

: drawBB
  return

: drawCB
  return

: drawDB
  return

: drawEB
  drawVPath
  return

: drawFB
  v4 := 28
	v5 := 12
	i  := bigFlower
	sprite v4 v5 8
return

: drawGB
  return

: drawHB
  return

: drawAC
  return

: drawBC
  return

: drawCC
	drawSpiral
  return

: drawDC
  return

: drawEC
  drawVPath
  return

: drawFC
  return

: drawGC
  return

: drawHC
  return

: drawAD
  return

: drawBD
  return

: drawCD
  return

: drawDD
  return

: drawED
  drawVPath
  return

: drawFD
  return

: drawGD
  drawSpiral
  return

: drawHD
  return

: drawAE
  drawHPath
  return

: drawBE
  drawHPath
  return

: drawCE
  drawHPath
	return

: drawDE
  drawHPath
  return

: drawEE
  v4 := 4
	v5 := 2
	i  := threeSmallFlowers
	sprite v4 v5 6
	
  v4 := 40
	v5 := 24
	i  := twoSmallFlowers
	sprite v4 v5 7
	
	drawCrossroads
  return

: drawFE
  drawHPath
  return

: drawGE
  drawHPath
  return

: drawHE
  drawHPath
  return

: drawAF
  return

: drawBF
return

: drawCF
  return

: drawDF
  drawSpiral
  return

: drawEF
  drawVPath
  return

: drawFF
  return

: drawGF
  return

: drawHF
  return

: drawAG
  return

: drawBG
  return

: drawCG
  return

: drawDG
  return

: drawEG
  drawVPath
  return

: drawFG
  return

: drawGG
	hasKey
	  if v0 == FALSE then drawKey
  return

: drawHG
  return

: drawAH
  return

: drawBH
  return

: drawCH
  return

: drawDH
  return

: drawEH
  drawVPath
  return

: drawFH
  return

: drawGH
  return

: drawHH
  return


###########
# SPRITES #
###########

: largeSpiral #16x16
0x00 0x0F 0x90 0x67 0x08 0x13 0x24 0x29 0x2A 0x29 0x24 0x13 0x08 0x07 0x00
0x00 0xF0 0x08 0xE4 0x12 0xCA 0x2A 0x2A 0xAA 0xCA 0x12 0xE4 0x08 0xF0 0x00

: keySprite
0x3C 0x24 0x24 0x3C 0x10 0x18 0x10 0x1C

#decor
: smallFlower
0x40 0xA0 0x40
: twoSmallFlowers
0x08 0x14 0x08 0x00 0x20 0x50 0x20
: threeSmallFlowers
0x40 0xA2 0x45 0x12 0x28 0x10

: bigFlower
0x66 0xDB 0xA5 0x5A 0x5A 0xA5 0xDB 0x66

# path
: hPathA
0xFF 0x26 0xFF 0x52 0x52 0xFF 0x92 0xFF
: hPathB
0xFF 0x52 0xFF 0x49 0x49 0xFF 0xA4 0xFF
: hPathC
0xFF 0x16 0xFF 0x49 0x6A 0xFF 0x22 0xBF
: hPathD
0xFF 0xA6 0xFF 0x4A 0x52 0xFF 0xA5 0xFF

: vPathA
0xBD 0xA7 0xFD 0xA5 0xA7 0xFD 0xA5 0xE7
: vPathB
0xFD 0xA7 0xA5 0xFD 0xA7 0xFD 0xA7 0xA5
: vPathC	
0xBF 0xA5 0xFD 0xA7 0xFD 0xA5 0xFD 0xA7
: vPathD
0xAF 0xE7 0xA5 0xBD 0xE5 0xA7 0xBD 0xE5

: crossroad
0x08 0x10 0x08 0x10 0x08 0x10 0x18 0x18 0xF0 0x0F 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xF0 0x0F 0x18 0x18 0x08 0x10 0x08 0x10 0x08 0x10
: crossroadTL
0x0F 0x0A 0x0A 0x1F 0xF2 0x57 0xFC 0x44
: crossroadBL
0x64 0xFC 0x57 0xF2 0x1E 0x0B 0x0A 0x0E
: crossroadTR
0xF0 0x50 0x50 0xF8 0x4F 0xEB 0x3F 0x26
: crossroadBR
0x25 0x3F 0xE8 0x4F 0x78 0xD0 0x70 0x50

: hline
0xFF
: vline
0b10000000

: upleft
0x00 0x7C 0x40 0x50 0x48 0x44 0x02 0x00
: up
0x00 0x18 0x3C 0x7E 0x18 0x18 0x18 0x00
: upright
0x00 0x7E 0x02 0x0A 0x12 0x22 0x42 0x00

: left
0x00 0x10 0x30 0x7E 0x7E 0x30 0x10 0x00
: center
0x00 0x18 0x3C 0x7E 0x7E 0x3C 0x18 0x00
: right
0x00 0x08 0x0C 0x7E 0x7E 0x0C 0x08 0x00

: downleft
0x00 0x00 0x00 0x24 0x28 0x30 0x3C 0x00
: down
0x00 0x18 0x18 0x18 0x7E 0x3C 0x18 0x00
: downright
0x00 0x00 0x00 0x12 0x0A 0x06 0x1E 0x00
